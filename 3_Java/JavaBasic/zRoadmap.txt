

JAVA PROFESSIONAL ============================================================================================

      <h3>1. Сборка мусора и типы ссылок в Java</h3>
      <ul>
        <li>память JVM: stack и heap</li>
        <li>CG: Serial, Parallel, CMS, G1, Shenandoah, ZGC</li>
        <li>кеш</li>
        <li>WeakReference, SoftReference, PhantomReference</li>
      </ul>

      <h3>2. Паттерны проектирования</h3>
      <ul>
        <li>поведенческие: цепочка ответственности, команда, итератор, интерпретатор, посредник, хранитель, наблюдатель, состояние, стратегия, посетитель, шаблонный метод</li>
        <li>порождающие: прототип, строитель, синглтон, абстрактная фабрика, фабричный метод</li>
        <li>декоратор, компоновщик, фасад, приспособленец, прокси</li>
      </ul>

      <h3>3. Методологии разработки</h3>
      <ul>
        <li>waterfall</li>
        <li>v-model</li>
        <li>incremental</li>
        <li>RAD model</li>
        <li>agile</li>
        <li>iterative</li>
        <li>spiral</li>
      </ul>

      <h3>4. Основы Maven. Установка Maven, управление зависимостями, виды Maven-репозиториев, сборка Java-проекта</h3>
      <ul>
        <li>скачивание, прописывание переменных окружения</li>
        <li>создание maven-проекта</li>
        <li>зависимости</li>
        <li>плагины</li>
        <li>фазы (lifecycle)</li>
        <li>профили</li>
        <li>билд артефактов</li>
      </ul>

      <h3>5. Опыт работы с Guava, Apache Commons Collections</h3>
      <ul>
        <li>Multimap, BiMap</li>
        <li>Multiset</li>
        <li>неизменяемые коллекции</li>
        <li>Objects: hashCode, equals</li>
        <li>Throwables</li>
        <li>CollectionUtils</li>
        <li>StringUtils</li>
      </ul>

      <h3>6. JUnit</h3>
      <ul>
        <li>зачем нужно тестирование</li>
        <li>типы тестирования</li>
        <li>@Test</li>
        <li>@Before, @After</li>
        <li>@BeforeClass, @AfterClass</li>
        <li>параметризованные тесты</li>
      </ul>

      <h3>7. Mockito</h3>
      <ul>
        <li>моки</li>
        <li>mock и spy</li>
        <li>when и thenReturn</li>
        <li>verify</li>
        <li>any, once, times</li>
      </ul>

      <h3>8. Логирование</h3>
      <ul>
        <li>зачем нужны логи</li>
        <li>уровни логирования</li>
        <li>slf4j</li>
        <li>реализации: log4j, JUL, logback, common-loggins</li>
        <li>аппендеры</li>
      </ul>

      <h3>9. Устройство сети. Сетевая модель</h3>
      <ul>
        <li>топология сети</li>
        <li>модель OSI</li>
        <li>DNS</li>
      </ul>

      <h3>10. Архитектура ПО. Клиент-серверная архитектура и ее составляющие, трехуровневая архитектура, архитектурные шаблоны</h3>
      <ul>
        <li>клиент-серверная архитектура</li>
        <li>трехуровневая архитектура (клиент-сервер-БД)</li>
        <li>критерии хорошей архитектуры: эффективность, гибкость, расширяемость, масштабируемость, удобство тестирования, читаемый и понятный код</li>
        <li>модульная архитектура. декомпозиция</li>
      </ul>

      <h3>11. Протоколы HTTP/HTTPS. Протокол передачи данных, HTTP-запросы и ответы, отличия HTTP и HTTPS. Cookies, Session</h3>
      <ul>
        <li>протоколы передачи данных в сети</li>
        <li>http методы (GET, POST, PUT, …)</li>
        <li>параметры запросов</li>
        <li>тело запроса</li>
        <li>хедеры</li>
        <li>коды ответов</li>
        <li>http VS https</li>
        <li>http сессии</li>
        <li>куки</li>
        <li>http/2</li>
      </ul>

      <h3>12. HttpClient</h3>
      <ul>
        <li>AJAX</li>
        <li>java http client</li>
        <li>синхронные и асинхронные запросы</li>
        <li>задача на получение данных с нета, например погода</li>
      </ul>

      <h3>13. Сервлеты, Java servlet API. Пишем простое веб-приложение</h3>
      <ul>
        <li>что такое сервлет</li>
        <li>жизненный цикл</li>
        <li>сервлет-контейнер Tomcat</li>
        <li>doGet, doPost</li>
        <li>redirect VS forward</li>
        <li>фильтры</li>
      </ul>

      <h3>14. Контейнеры сервлетов: Tomcat, развертывание приложения, настройка сервера</h3>
      <ul>
        <li>практика по предыдущей лекции</li>
      </ul>

      <h3>15. Знакомство с MVC (Model-View-Controller). JSP</h3>
      <ul>
        <li>набор архитектурных принципов и идей MVC</li>
        <li>схемы MVC</li>
        <li>MVC в вебе</li>
        <li>типичная ошибка: бизнес-логика в контроллере</li>
        <li>MVC на примере задачи</li>
        <li>JSP</li>
      </ul>

      <h3>16. Веб-сервисы</h3>
      <ul>
        <li>что такое веб-сервис</li>
        <li>протоколы http, jms, ftp,...</li>
        <li>синхронные и асинхронные запросы</li>
        <li>облачные сервисы: IaaS, PaaS, SaaS (что угодно as a service)</li>
      </ul>

      <h3>17. HTML-факультатив</h3>
      <ul>
        <li>что такое HTML</li>
        <li>структура HTML документа</li>
        <li>теги и их атрибуты</li>
        <li>CSS, его синтаксис</li>
        <li>классы и идентификаторы</li>
        <li>селекторы</li>
      </ul>


DB, HIBERNATE ============================================================================================

            <h3>1. Введение в базы данных. Установка СУБД (MySQL). ddl,&nbsp;dml</h3>
            <ul>
              <li>зачем нужны БД</li>
              <li>реляционные и нереляционные БД</li>
              <li>реляционная модель</li>
              <li>CAP теорема</li>
              <li>установка MySQL developer</li>
              <li>группы SQL (ddl, dml, dcl, tcl)</li>
            </ul>

            <h3>2. Типы данных. Создание таблицы. Написание insert, select, update, delete</h3>
            <ul>
              <li>создание схемы</li>
              <li>создание таблиц</li>
              <li>изменение структуры таблиц</li>
              <li>insert</li>
              <li>select</li>
              <li>update</li>
              <li>delete</li>
            </ul>

            <h3>3. Выбор данных</h3>
            <ul>
              <li>select с условием</li>
              <li>перечень выбираемых данных</li>
              <li>subselect</li>
              <li>join: left, right, inner, cross</li>
              <li>group by и агрегатные функции</li>
              <li>index</li>
            </ul>

            <h3>4. Транзакции БД</h3>
            <ul>
              <li>концепции ACID (Atomicity, Consistency, Isolation, Durability)</li>
              <li>управление транзакциями</li>
              <li>уровни изоляции данных</li>
            </ul>

            <h3>5. Проектирование баз данных</h3>
            <ul>
              <li>первая нормальная форма</li>
              <li>вторая нормальная форма</li>
              <li>третья нормальная форма</li>
              <li>ключи (foreign key)</li>
              <li>отношения: one to …, many to...</li>
            </ul>

            <h3>6. JDBC 1</h3>
            <ul>
              <li>зачем нужен</li>
              <li>основные интерфейсы</li>
              <li>получение данных в приложении из БД</li>
              <li>обновление и удаление данных в приложении из БДа</li>
            </ul>

            <h3>7. JDBC 2</h3>
            <ul>
              <li>транзакции</li>
              <li>уровни изоляции</li>
              <li>обработка checker исключений</li>
            </ul>

            <h3>8. ORM. Hibernate</h3>
            <ul>
              <li>нестыковки объектной и реляционной моделей данных</li>
              <li>ORM (Hibernate), JPA</li>
              <li>архитектура hibernate</li>
              <li>конфигурация, основные аннотации</li>
              <li>получение данных в приложении из БД</li>
              <li>обновление и удаление данных в приложении из БД</li>
              <li>Hibernate VS JDBC</li>
            </ul>

            <h3>9. Hibernate. OneTo…, ManyTo..</h3>
            <ul>
              <li>отношения (работа с коллекциями)</li>
            </ul>

            <h3>10. Наследование Entity for ORM</h3>
            <ul>
              <li>одна таблица для каждого класса</li>
              <li>одна таблица для каждого класса с предками</li>
              <li>единая таблица для всей иерархии классов</li>
              <li>одна таблица для каждого класса с использованием соединений (join)</li>
            </ul>

            <h3>11. Итоговый проект</h3>
            <ul>
              <li>hash for passwords</li>
            </ul>
          </div>

JAVA PROFESSIONAL ============================================================================================

      <h3>1. IoC, DI. Spring. Components. Beans</h3>
      <ul>
        <li>почему Spring стал де-факто стандартом отрасли (преимущества)</li>
        <li>принципы IoC и DI</li>
        <li>бин</li>
        <li>контекст (ApplicationContext)</li>
        <li>AOP</li>
      </ul>

      <h3>2. Spring modules general. Spring Web MVC</h3>
      <ul>
        <li>core (beans, core, context, SpEL)</li>
        <li>data access</li>
        <li>testing</li>
        <li>web</li>
        <li>integration</li>
        <li>web mvc</li>
      </ul>

      <h3>3. Проектирование REST API</h3>
      <ul>
        <li>оперирование ресурсами, а не методами</li>
        <li>http методы</li>
        <li>http коды ответов</li>
        <li>ошибки</li>
        <li>запрос коллекции</li>
        <li>запрос количества объектов в коллекции</li>
        <li>запрос объекта коллекции</li>
        <li>добавление данных в коллекцию</li>
        <li>редактирование</li>
        <li>удаление</li>
        <li>д.з. спроектировать 2-ранговый REST API</li>
      </ul>

      <h3>4. App controller-service-dao</h3>
      <ul>
        <li>иерархия контекстов</li>
        <li>servlet config</li>
        <li>контроллер - прием запроса</li>
        <li>сервис - бизнес логика</li>
        <li>dao - хранение состояния</li>
      </ul>

      <h3>5. Spring ORM. @Transaction</h3>
      <ul>
        <li>абстракция “транзакция”</li>
        <li>декларативные транзакции</li>
        <li>transaction propagation</li>
        <li>преимущества ORM + Spring</li>
        <li>настройка hibernate SessionFactory</li>
        <li>live coding example</li>
      </ul>

      <h3>6. Spring Test. AOP (logging)</h3>
      <ul>
        <li>unit testing</li>
        <li>integration testing</li>
        <li>основные аннотации</li>
        <li>TestContext</li>
        <li>live coding example (тестирование API-метода или пары методов)</li>
        <li>spring commons logging bridge</li>
      </ul>

      <h3>7. Spring Security (memory, DB)</h3>
      <ul>
        <li>ключевые объекты контекста spring security: SecurityContextHolder, Authentication, UserDetails, GrantedAuthority</li>
        <li>авторизация и аутентификация</li>
        <li>OAuth2</li>
        <li>сессии в памяти</li>
        <li>сессии в БД</li>
      </ul>

      <h3>8. Spring Boot. Spring JPA</h3>
      <ul>
        <li>стартеры</li>
        <li>автоконфигурация</li>
        <li>встроенные tomcat</li>
        <li>аннотации конфигурации</li>
        <li>демонстрация spring data jpa (генерация запроса по названию метода в рантайме)</li>
      </ul>
    </div>