#Intro into Java
0.1 - installing java / git / intellij / maven ?
0.2 - first program using .txt and javac compiler
0.3 - Hello World in intellij
0.4 - Useful shortcuts, ctrl + D, ALT vertical use  comments in Java

#Basics
1.1 - Variables: declaration/types/local/global*field/instance
        String , int , long, float , double, boolean
        Integer, Long, Boolean etc. Objects to primitive diff 'Integer.parseInt()'     Object uses 'new' keyword
        Implicit casting / Explicit casting
1.2 - Functions(method in OOP)
1.3 - String , immutable - manipulation
        String conversion '.parseInt()'
1.5 - Operators:
        arithmetical / unary
        relational / comparison
        logical / conditional
        assignment
1.6 - Statements:
        if-then
        if-then-else
        switch
        ternary
1.7 - Loop controls:
        FOR foreach, fori
        while
        do while
        continue/break
1.8 - Clean code policy, programmer convention, variable naming convention


#Classes & Objects
2.1 - Classes initialization (blueprint), Object creation (blueprints representation),
2.2 - Constructors. default constructor == without parameters.
2.3 - access level modifiers public/protected/no-modifier/private         private classes can be declared as Inner or Nested
2.4 - modifiers static/final (synchronized, volatile, transient)
        final class prevents extending of class
            synchronized - only one thread at a time
            volatile - prevents reordering in cache memory in runtime
            transient - marks not to serialize this field.
2.5 - Nested Classes/ Inner Classes

#OOP
3.1 - OOP principles abstraction/encapsulation/polymorphism/inheritance
        association - connectivity between objects one-to-one , one-to-many etc.
        composition - Member is tied to his Owner. Building and room example
        aggregation - They are not tied. Player and a Team example
3.2 - encapsulation -
        getters, - Read Only class
        setters, - Write Only class
        private modifiers
3.3 - inheritance -
        interface, overriding
3.4 - polymorphism -
        overriding, overloading
3.5 - abstraction -
        abstract class, abstract method

#Exceptions
4.1 - Types: checked exception, unchecked = runtime exception, error
4.2 - try , catch
4.3 - finally block
        always executes after try
        bypass continue, break, return
4.4 - try-with-resources ( buffer reader etc. .close();)            // custom exception have to implement AutoCloseable
4.5 - throwing exception inside method, outside 'method() throws'
4.6 - creating our own exception

#Array, Collections
5.1 - Collections: - array vs collections
5.2 - Arrays [] single/multidimensional [][]- size is set on creation
5.3 - ArrayList/LinkedList (stack, vector) - custom comporator
5.4 - hashSet/treeSet/LinkedHashSet (sortedSet == treeSet)
5.5 - queue/dequeue (priorityQueue, ArrayDeque)
5.6 - Map
        size/ order / manipulations
        hashMap/treeMap/LinkedHashMap
        Iterator/iterable

#IO package - Input/Output source - Java - destination
6.1 - Input types:
        Scanner for primitives input
        BufferedReader for bigger data input ( file etc.)
6.2 - Output types:
        console/log - println(), printf()
6.3 - Data serialization/ de-serialization
6.4 - Object streams
6.5 - File reader/writer

#Networking TCP/UDP
7.1 - TCP / URL, URLConnection
7.2 - TCP /Socket , ServerSocket
7.3 - UDP / DatagramPacket, DatagramSocket, MulticastSocket

#JDBC (MySQL preferred + docker / H2 with Spring Boot) - transient to check
8.1 - DB connection
8.2 - Create query/statement
        insert
        update
        select
        delete

#Concurrency
8.1 - Processes/Threads
8.2 - Runnable interface
8.3 - Pausing execution
8.4 - interrupts/join
8.5 - Synchronized / volatile
8.6 - High level concurrency/ lock / cyclicBarrier

#Advanced language features
9.1 - VARARGS Arbitrary number of arguments in methods parameters method(String... inputString)
9.2 - Ternary operators
9.3 - Enums
9.4 - Static imports.
9.5 - Annotations

#Generics
10.1 - Autoboxing
10.2 - Generics
       Pair<K, V>
       U extends Number







todo    make some quizes
        learn in interactive way


#Advanced JAVA

String immutable explained
stack/heap memory -> https://www.baeldung.com/java-stack-heap


#usefull
collections - https://www.javatpoint.com/collections-in-java