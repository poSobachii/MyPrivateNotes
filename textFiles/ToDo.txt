todo java
    java basics - data types / primitive / non-primitive
    https://www.w3schools.com/java/java_data_types.asp
    "instance of" examples
    some simple arithmetics % ++ etc.
    types of exceptions ? InputMismatchException
    continue/break examples
    seriazable & Path path example
    thread safe - what is it / immutable dependens
    .sinroinizedMap() / .flatMap    - stream foreach map.
    if else - order of checking statements
    record type (record Customer(String name)

todo more java examples

        // integer-type
        System.out.println(10 == 20);

        // char-type
        System.out.println('a' == 'b');

        // char and double type
        System.out.println('a' == 97.0);

        // boolean type
        System.out.println(true == true);

https://www.geeksforgeeks.org/difference-between-and-equals-method-in-java

        // java stack vs heap memory = primitives vs non-primitives
https://www.digitalocean.com/community/tutorials/java-heap-space-vs-stack-memory
https://www.digitalocean.com/community/tutorials/java-jvm-memory-model-memory-management-in-java
============================================================================================

Integer number = new Integer(5); // 'number' is a reference to an Integer object
int x = number.intValue();
starting from java 5 ->
Integer number = 5; // Autoboxing: converting int to Integer
int x = number;      // Unboxing: extracting int from Integer
============================================================================================


IT destinations ->
clouds
big data
cyber security
dev-ops
machine learning

System design:
    1 load balancer
    2 caching
    3 content delivery network
    4 database replication
    5 database partitioning
    6 api's/services

interview questions:
    how to handle 1 million request per second ?
    authorization vs authentication and how to implement both
    how RESTful API works ?
    how to ensure data consistency in a distributed system ?
    caching stragegies in backend ?
    testing approach (unit/integration/selenenium etc.)
    how to store sensitive information(security)
    deploying and maintain backend services
    logging and monitoring /debuging your applications


Algorithms:

    BFS

    Linear search
    Binary search
    Depth first search (DFS)
    Breadth first search (BFS)

    Insertion sort
    Heap sort
    Selection sort
    Merge sort
    Quick sort
    Counting sort
    Topological sort

    Kruskal's algorithm
    Dijkstra's algorithm
    Bellman Ford algorithm
    Floyd Warshall algorithm
    Flood Fill algorithm
    Lee algorithm

    Kadane's algorithm
    Floyd cycle detection algorithm
    KMP algorithm
    Quick Select algorithm
    Boyer More Majority Vote algorithm

    Huffman coding
    Compression algorithm
    Euclid's algorithm
    Union Find algorithm

Data Structures used in daily:
    List - Twitter feeds
    Array - Marth operations, large data sets
    Stack - Undo/Redo of word editor
    Queue - Printer jobs, user actions in game
    Heap - task scheduling
    Tree - HTML document, AI decision
    Suffix Tree - Search string in document
    Graph - Friendship tracking, path finding
    R-tree - Nearest neighbour
    Hash table - caching systems

todo swagger
    check online swagger editor with OpenAPI specification



todo javascript

    web3 - document.hiden visibility,               // track if tab is opened or not
    document.dispatchEvent()                    // to send
    document.addEventListener()                 // to receive

    .onLoad() and other js functions




    java -version
    javac -version

============================================================================================
The word "Java" appears in the name "JavaScript" primarily due to marketing efforts rather than a direct technical
connection between the two languages. When JavaScript was first introduced in 1995, it was intended to complement
and extend the Java programming language, which was gaining popularity at the time. Netscape, the company behind
JavaScript, hoped that by incorporating the name "Java," they could attract developers familiar with Java and encourage
them to adopt JavaScript for web development.

In reality, JavaScript and Java are distinct programming languages with different syntax, semantics,
and application domains. Java is a general-purpose, object-oriented programming language primarily used
for server-side development, while JavaScript is a scripting language primarily used for client-side web development.
Despite their different roles, JavaScript does borrow some concepts and terminology from Java,
such as the concept of objects and object-oriented programming.

However, over time, the connection between Java and JavaScript has become less significant.
JavaScript has evolved into a mature and widely used language, and its association with Java has diminished.
Today, developers recognize JavaScript as a distinct language with its own strengths and applications.

